usage: polygraphy debug [-h] [-v] [-q] [--silent]
                        [--log-format {timestamp,line-info,no-colors} [{timestamp,line-info,no-colors} ...]]
                        [--log-file LOG_FILE]
                        {build,precision,diff-tactics,reduce,repeat} ...

[EXPERIMENTAL] Debug model accuracy issues.

optional arguments:
  -h, --help            show this help message and exit

Logging:
  Options for logging and debug output

  -v, --verbose         Increase logging verbosity. Specify multiple times for
                        higher verbosity
  -q, --quiet           Decrease logging verbosity. Specify multiple times for
                        lower verbosity
  --silent              Disable all output
  --log-format {timestamp,line-info,no-colors} [{timestamp,line-info,no-colors} ...]
                        Format for log messages: {{'timestamp': Include
                        timestamp, 'line-info': Include file and line number,
                        'no-colors': Disable colors}}
  --log-file LOG_FILE   Path to a file where Polygraphy logging output should
                        be written. This will not include logging output from
                        dependencies, like TensorRT or ONNX-Runtime.

Debug Subtools:
  {build,precision,diff-tactics,reduce,repeat}
    build               Repeatedly build an engine to isolate flaky behavior,
                        sorting generated artifacts into `good` and `bad`
                        directories. Each iteration will generate an engine
                        called 'polygraphy_debug.engine' in the current
                        directory.
    precision           Iteratively mark layers to run in a higher precision
                        to find a compromise between performance and quality.
                        Each iteration will generate an engine called
                        'polygraphy_debug.engine' in the current directory.
    diff-tactics        Determine potentially bad tactics given sets of good
                        and bad tactic replay files.
    reduce              [EXPERIMENTAL] Reduce a failing ONNX model to the
                        minimum set of nodes that cause the failure. Each
                        iteration will generate an ONNX model called
                        'polygraphy_debug.onnx' in the current directory.
    repeat              [EXPERIMENTAL] Run an arbitrary command repeatedly,
                        sorting generated artifacts into `good` and `bad`
                        directories.
